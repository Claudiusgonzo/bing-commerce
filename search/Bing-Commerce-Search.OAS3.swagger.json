{
    "swagger": "2.0",
    "info": {
        "title": "Bing Commerce Search",
        "version": "1"
    },
    "host": "commerce.bing.com",
    "basePath": "/api/search/v1/",
    "schemes": [
        "https"
    ],
    "paths": {
        "/{tenant}/indexes/{index}": {
            "post": {
                "tags": [
                    "CommerceSearchService"
                ],
                "summary": "Bing Commerce Custom Search Query.",
                "description": "POST requests accept complex search request options.",
                "operationId": "Search_Post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CommerceSearchPostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/CommerceSearchResponse"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "CommerceSearchService"
                ],
                "summary": "Bing Commerce Basic Search Query.",
                "description": "GET requests can search an index using only URL parameters. Only limited request options are available. GET requests will always do simple item search and support only a default facet discovery aggregation.",
                "operationId": "Search_Get",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "mkt",
                        "description": "The market where the results come from. Typically, `mkt` is the country where the user is making the request from.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "setlang",
                        "description": "The language to use for user interface strings. You may specify the language using either a 2-letter or 4-letter code. Using 4-letter codes is preferred.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "q",
                        "description": "The query to match against all eligible fields.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "select",
                        "description": "A comma-separated list of fields to return. unspecified or empty to select only _itemId, or `*` to select all fields.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "orderby",
                        "description": "A comma-separated list of OData order syntax expressions.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "top",
                        "description": "The maximum count of items to return for pagination. Default is 24.",
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "skip",
                        "description": "The offset to the first item to return for pagination. Default is 0.",
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "query",
                        "name": "discoverfacets",
                        "description": "Default value is false. When true, requests a facet discovery aggregation.",
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "in": "query",
                        "name": "alteration",
                        "description": "A boolean flag to enable or disable query alteration. Default is true.",
                        "type": "boolean",
                        "default": true
                    },
                    {
                        "in": "query",
                        "name": "debug",
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "in": "query",
                        "name": "searchinstanceid",
                        "description": "A saved search instance configuration to apply to current request.",
                        "type": "string",
                        "default": "Default"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/CommerceSearchResponse"
                        }
                    }
                }
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "tenant",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "index",
                    "required": true,
                    "type": "string"
                }
            ]
        }
    },
    "definitions": {
        "CommerceSearchPostRequest": {
            "type": "object",
            "properties": {
                "market": {
                    "description": "The market where the results come from. Typically, `mkt` is the country where the user is making the request from.",
                    "type": "string"
                },
                "client": {
                    "$ref": "#/definitions/Request.Client"
                },
                "language": {
                    "description": "The language to use for user interface strings. You may specify the language using either a 2-letter or 4-letter code. Using 4-letter codes is preferred.",
                    "type": "string"
                },
                "query": {
                    "$ref": "#/definitions/Request.Query",
                    "description": "The query that determines the result set match criteria."
                },
                "items": {
                    "$ref": "#/definitions/Request.Items",
                    "description": "A description for how the items in the result set would look like."
                },
                "aggregations": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Request.AggregationBase"
                    }
                },
                "debug": {
                    "default": false,
                    "type": "boolean"
                },
                "searchInstanceId": {
                    "description": "A saved search instance configuration to apply to current request.",
                    "default": "Default",
                    "type": "string"
                }
            }
        },
        "Request.Client": {
            "type": "object",
            "properties": {
                "ids": {
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Request.ClientId"
                    }
                }
            }
        },
        "Request.ClientId": {
            "type": "object",
            "properties": {
                "kind": {
                    "default": "MUID",
                    "enum": [
                        "MUID",
                        "UID"
                    ],
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "Request.Query": {
            "description": "Represents the query that determines the result set. Note that query must have a matchAll, value, or filter field. The matchAll and value fields cannot both be present. You may create a query with only a filter to **browse** (for example: a category).",
            "type": "object",
            "properties": {
                "matchAll": {
                    "description": "A query that matches against all searchable fields.",
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/Request.QueryClauseBase",
                    "description": "An instance of queryclausebase specifying search conditions. Its mutually exclusive with matchall."
                },
                "filter": {
                    "$ref": "#/definitions/ConditionBase",
                    "description": "A filter to apply on the matching result set, or on all items if no match is specified."
                },
                "boosts": {
                    "description": "The set of boosts to apply to the result set.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BoostExpression"
                    }
                },
                "alteration": {
                    "description": "A boolean flag to enable or disable query alteration.",
                    "default": true,
                    "type": "boolean"
                },
                "synonyms": {
                    "description": "A set of alternate terms (or phrases) that can be applied to request query. The applied synonyms are used for both text-matching and result-ranking stages of search.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Synonym"
                    }
                }
            }
        },
        "Request.QueryClauseBase": {
            "description": "Defines the abstract base type for a query clause.",
            "required": [
                "_type"
            ],
            "type": "object",
            "properties": {
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type"
        },
        "Request.Match": {
            "description": "Defines a type of query to search specific fields.",
            "required": [
                "_type"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/Request.QueryClauseBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "value": {
                            "description": "The search terms to match on the specified fields.",
                            "type": "string"
                        }
                    }
                }
            ],
            "properties": {
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type",
            "x-ms-discriminator-value": "Match"
        },
        "Request.Bing.MatchStreams": {
            "allOf": [
                {
                    "$ref": "#/definitions/Request.Match"
                },
                {
                    "type": "object",
                    "properties": {
                        "include": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "MatchStreams"
        },
        "Request.QueryClauseBlock": {
            "description": "Defines a list of QueryClauseBase objects that should all match. Nested QueryClauseBlock within QueryClauseBlock is not allowed.",
            "allOf": [
                {
                    "$ref": "#/definitions/Request.QueryClauseBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "values": {
                            "description": "A list of queryclausebase conditions to be applied.",
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Request.QueryClauseBase"
                            }
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "QueryClauseBlock"
        },
        "Request.LocationMatch": {
            "description": "Defines user location to match. If an explicit location is specified in a match query, this is ignored.",
            "allOf": [
                {
                    "$ref": "#/definitions/Request.QueryClauseBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "center": {
                            "$ref": "#/definitions/GeoPoint",
                            "description": "The geo-location that you wish for the search to be applied around."
                        },
                        "radius": {
                            "format": "float",
                            "description": "The accuracy of the search on that location in meters.",
                            "type": "number"
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "LocationMatch"
        },
        "GeoPoint": {
            "description": "Defines a geo-location based on lattitude and longitude.",
            "type": "object",
            "properties": {
                "lat": {
                    "format": "float",
                    "description": "The lattitude of the location.",
                    "type": "number"
                },
                "lon": {
                    "format": "float",
                    "description": "The longitude of the location.",
                    "type": "number"
                }
            }
        },
        "ConditionBase": {
            "description": "The condition that items must satisfy to be boosted.",
            "required": [
                "_type"
            ],
            "type": "object",
            "properties": {
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type"
        },
        "ConditionBlock": {
            "description": "Defines a list of composite conditions for filtering and boosting.",
            "allOf": [
                {
                    "$ref": "#/definitions/ConditionBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "conditions": {
                            "description": "The set of operands.",
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ConditionBase"
                            }
                        },
                        "operator": {
                            "$ref": "#/definitions/LogicalOperator",
                            "description": "and, or. Default is `And`."
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "ConditionBlock"
        },
        "FieldConditionBase": {
            "description": "Defines the abstract base type for conditions with a field name.",
            "required": [
                "_type"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/ConditionBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "field": {
                            "description": "The name of the field.",
                            "type": "string"
                        }
                    }
                }
            ],
            "properties": {
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type"
        },
        "EquivalenceConditionBase": {
            "description": "Defines the abstract base type for conditions that does an exact match for a field.",
            "required": [
                "_type"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/FieldConditionBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "operator": {
                            "$ref": "#/definitions/EquivalenceOperator"
                        }
                    }
                }
            ],
            "properties": {
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type"
        },
        "StringCondition": {
            "description": "Defines an equivalence condition for a string field. It can appear in a filter, a boost, or a filter aggregation.",
            "allOf": [
                {
                    "$ref": "#/definitions/EquivalenceConditionBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "value": {
                            "description": "The value to compare the field against.",
                            "type": "string"
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "StringCondition"
        },
        "BoolCondition": {
            "description": "Defines an equivalence condition for a Boolean field. It can appear in a filter, a boost, or a filter aggregation.",
            "allOf": [
                {
                    "$ref": "#/definitions/EquivalenceConditionBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "value": {
                            "description": "The value (true or false) to compare the field against.",
                            "type": "boolean"
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "BoolCondition"
        },
        "NumericCondition": {
            "description": "Defines an equivalence condition for a numeric field. It can appear in a filter, a boost, or a filter aggregation.",
            "allOf": [
                {
                    "$ref": "#/definitions/FieldConditionBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "value": {
                            "format": "double",
                            "description": "The value to compare the field against.",
                            "type": "number"
                        },
                        "operator": {
                            "$ref": "#/definitions/ComparisonOperator",
                            "description": "The comparison operator. Default is `gt`"
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "NumericCondition"
        },
        "CategoryCondition": {
            "description": "Defines an inclusion condition for a category field. It can appear in a filter, a boost, or a filter aggregation.",
            "allOf": [
                {
                    "$ref": "#/definitions/FieldConditionBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "value": {
                            "description": "The category to match items against. The format for specifying hierarchical categories is a pipe-delimited string, such as `Meanswear|shirts|Dress Shirts`.",
                            "type": "string"
                        },
                        "operator": {
                            "$ref": "#/definitions/CategoryOperator",
                            "description": "The category operator to apply. Default is `In`."
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "CategoryCondition"
        },
        "SetConditionBase": {
            "description": "Defines the abstract base type for conditions that matches with a set of values.",
            "required": [
                "_type"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/FieldConditionBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "operator": {
                            "$ref": "#/definitions/SetOperator"
                        }
                    }
                }
            ],
            "properties": {
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type"
        },
        "StringSetCondition": {
            "description": "Defines a condition where the field must exactly match one of the values within the set to be included / excluded. It can appear in a filter, a boost, or a filter aggregation.",
            "allOf": [
                {
                    "$ref": "#/definitions/SetConditionBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "values": {
                            "description": "The set of values for the field to match against.",
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "StringSetCondition"
        },
        "GeoCondition": {
            "description": "Defines a condition that applies on a geo-location field. It can appear in a filter, a boost, or a filter aggregation.",
            "allOf": [
                {
                    "$ref": "#/definitions/ConditionBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "boundary": {
                            "$ref": "#/definitions/GeoBoundaryBase",
                            "description": "The geo-bondary to match the results against."
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "GeoCondition"
        },
        "GeoBoundaryBase": {
            "description": "Defines the abstract base type for geo-location boundary.",
            "required": [
                "_type"
            ],
            "type": "object",
            "properties": {
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type"
        },
        "GeoBoundingBox": {
            "description": "Defines a geographical box to match the results that lie within it.",
            "allOf": [
                {
                    "$ref": "#/definitions/GeoBoundaryBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "topLeft": {
                            "$ref": "#/definitions/GeoPoint",
                            "description": "The top-left corner geo-location of the box."
                        },
                        "bottomRight": {
                            "$ref": "#/definitions/GeoPoint",
                            "description": "The bottom-right corner geo-location of the box."
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "GeoBoundingBox"
        },
        "GeoDistance": {
            "description": "Defines a geographical boundary that matches location within a certain euclidean distance from a point.",
            "allOf": [
                {
                    "$ref": "#/definitions/GeoBoundaryBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "center": {
                            "$ref": "#/definitions/GeoPoint",
                            "description": "The geo-location for the center point to match around."
                        },
                        "radius": {
                            "format": "float",
                            "description": "The accpeptable euclidean distance to the center.",
                            "type": "number"
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "GeoDistance"
        },
        "BoostExpression": {
            "description": "An expression that modifies the ranking score for item search results satisfying a condition.",
            "type": "object",
            "properties": {
                "condition": {
                    "$ref": "#/definitions/ConditionBase",
                    "description": "The condition that items must satisfy to be boosted."
                },
                "boost": {
                    "format": "double",
                    "description": "The value to add to the ranking score. The range is -10,000,000 to 10,000,000.",
                    "type": "number"
                }
            }
        },
        "Synonym": {
            "description": "Defines a set of alternate terms (or phrases) that can be applied to request query.",
            "type": "object",
            "properties": {
                "synonymId": {
                    "description": "The id for the saved synonym.",
                    "type": "string"
                },
                "synonyms": {
                    "description": "The alternate terms to apply",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "Request.Items": {
            "description": "Defines how to return items from the result set.",
            "type": "object",
            "properties": {
                "select": {
                    "description": "A list of fields that should appear for each item of the response.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "orderBy": {
                    "description": "A comma-separated list of OData order syntax expressions.",
                    "type": "string"
                },
                "top": {
                    "format": "int32",
                    "description": "The number of results to return. It can be used for pagination.",
                    "type": "integer"
                },
                "skip": {
                    "format": "int32",
                    "description": "The number of results to skip in the result set. Supports pagination.",
                    "type": "integer"
                },
                "dedupe": {
                    "description": "A boolean to specify whether you want the result set to exclude duplicates. Default is `false`.",
                    "default": false,
                    "type": "boolean"
                }
            }
        },
        "Request.AggregationBase": {
            "description": "Defines the abstract base type for an aggregation request.",
            "required": [
                "_type"
            ],
            "type": "object",
            "properties": {
                "name": {
                    "description": "A label that you specify for your aggregations, which the API passes through and returns with the response.",
                    "type": "string"
                },
                "aggregations": {
                    "description": "A list of child aggregations.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Request.AggregationBase"
                    }
                },
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type"
        },
        "Request.Filter": {
            "description": "Defines a filter aggregation.",
            "allOf": [
                {
                    "$ref": "#/definitions/Request.AggregationBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "value": {
                            "$ref": "#/definitions/ConditionBase",
                            "description": "The condition to match for the aggregation."
                        },
                        "includeCustomizations": {
                            "default": true,
                            "type": "boolean"
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "Filter"
        },
        "Request.FieldAggregationBase": {
            "description": "Defines the abstract base type for an aggregation request that have a field.",
            "required": [
                "_type"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/Request.AggregationBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "field": {
                            "description": "The field name.",
                            "type": "string"
                        }
                    }
                }
            ],
            "properties": {
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type"
        },
        "Request.FacetBase": {
            "description": "Defines the abstract base type for a facet request.",
            "required": [
                "_type"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/Request.FieldAggregationBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "orderBy": {
                            "description": "A comma-separated list of OData order syntax expressions. Default is `_count desc`",
                            "type": "string"
                        }
                    }
                }
            ],
            "properties": {
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type"
        },
        "Request.Facet": {
            "description": "Defines a facet where each refinement is for a single value.",
            "allOf": [
                {
                    "$ref": "#/definitions/Request.FacetBase"
                },
                {
                    "type": "object"
                }
            ],
            "x-ms-discriminator-value": "Facet"
        },
        "Request.RangeFacet": {
            "description": "Defines a facet with refinements that have numerical ranges.",
            "allOf": [
                {
                    "$ref": "#/definitions/Request.FacetBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "interval": {
                            "format": "int32",
                            "description": "Defines the size of the interval that can be used to refine a search which utilizes numerical range faceting.",
                            "type": "integer"
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "RangeFacet"
        },
        "Request.Min": {
            "description": "Aggregation type for getting the min value of a field. Only applicable to numeric data.",
            "allOf": [
                {
                    "$ref": "#/definitions/Request.FieldAggregationBase"
                },
                {
                    "type": "object"
                }
            ],
            "x-ms-discriminator-value": "Min"
        },
        "Request.Max": {
            "description": "Aggregation type for getting the max value of a field. Only applicable to numeric data.",
            "allOf": [
                {
                    "$ref": "#/definitions/Request.FieldAggregationBase"
                },
                {
                    "type": "object"
                }
            ],
            "x-ms-discriminator-value": "Max"
        },
        "Request.DiscoverFacets": {
            "description": "Defines an aggregation type that triggers facet discovery of significant facets.",
            "allOf": [
                {
                    "$ref": "#/definitions/Request.AggregationBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "discoverFilter": {
                            "description": "When true, if the top results share a filter then restrict facet discovery to that filter. Note that it attempts to discover category based filters.",
                            "default": false,
                            "type": "boolean"
                        },
                        "refinements": {
                            "description": "When true, returns refinement values in the response.",
                            "default": true,
                            "type": "boolean"
                        },
                        "pin": {
                            "description": "A list of facets to pin at the top positions of the DiscoveredFacets aggregations list.",
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Request.FacetBase"
                            }
                        },
                        "include": {
                            "description": "A list of facets to be included, but not necessarily at the top positions.",
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Request.FacetBase"
                            }
                        },
                        "exclude": {
                            "description": "A list of field names to exclude from consideration.",
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "facetDefaults": {
                            "$ref": "#/definitions/Request.Facet",
                            "description": "default facets to apply."
                        },
                        "rangeFacetDefaults": {
                            "$ref": "#/definitions/Request.RangeFacet",
                            "description": "default range facets to apply."
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "DiscoverFacets"
        },
        "CommerceSearchResponse": {
            "description": "The response to a Bing Commerce Search Query.",
            "allOf": [
                {
                    "$ref": "#/definitions/Response.Task"
                },
                {
                    "type": "object",
                    "properties": {
                        "impressionId": {
                            "description": "A random GUID to uniquely track the search response.",
                            "type": "string"
                        },
                        "queryContext": {
                            "$ref": "#/definitions/Response.QueryContext",
                            "description": "The query alteration result."
                        },
                        "items": {
                            "$ref": "#/definitions/Response.ItemsBase",
                            "description": "The item results"
                        },
                        "aggregations": {
                            "description": "The aggregations result.",
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Response.Aggregation"
                            }
                        },
                        "redirectUrl": {
                            "description": "The redirect url for this the current query from the request search instance.",
                            "type": "string"
                        },
                        "customization": {
                            "$ref": "#/definitions/Response.Customization",
                            "description": "The user defined customizations applied the search query."
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "SearchResponse"
        },
        "Response.QueryContext": {
            "description": "Defines an object that contains the result of query alteration.",
            "allOf": [
                {
                    "$ref": "#/definitions/Response.Task"
                },
                {
                    "type": "object",
                    "properties": {
                        "originalQuery": {
                            "description": "The user's query string as entered.",
                            "type": "string"
                        },
                        "alteredQuery": {
                            "description": "The altered query string that the API actually uses for the query (for example, corrected spelling).",
                            "type": "string"
                        }
                    }
                }
            ]
        },
        "Response.Task": {
            "required": [
                "_type"
            ],
            "type": "object",
            "properties": {
                "errors": {
                    "description": "A list of errors that happened to the task, if any.",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Response.Error"
                    }
                },
                "debug": {
                    "description": "",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Response.DebugInfo"
                    }
                },
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type"
        },
        "Response.Error": {
            "description": "Defines The error details that happened to a task.",
            "type": "object",
            "properties": {
                "code": {
                    "default": "None",
                    "enum": [
                        "None",
                        "ServerError",
                        "InvalidRequest",
                        "InsufficientAuthorization"
                    ],
                    "type": "string"
                },
                "subCode": {
                    "enum": [
                        "UnexpectedError",
                        "ResourceError",
                        "DeadlineExceeded",
                        "ParameterMissing",
                        "ParameterInvalidValue"
                    ],
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "moreDetails": {
                    "type": "string"
                }
            }
        },
        "Response.DebugInfo": {
            "required": [
                "_type"
            ],
            "type": "object",
            "properties": {
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type"
        },
        "Response.Bing.BingItemDebugInfo": {
            "allOf": [
                {
                    "$ref": "#/definitions/Response.DebugInfo"
                },
                {
                    "type": "object",
                    "properties": {
                        "perfectMatchingStreams": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Response.Bing.MatchingStream"
                            }
                        },
                        "completeMatchingStreams": {
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Response.Bing.MatchingStream"
                            }
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "BingItemDebugInfo"
        },
        "Response.Bing.MatchingStream": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "score": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "Response.Customization": {
            "description": "Defines the customizations applied to the search operation.",
            "allOf": [
                {
                    "$ref": "#/definitions/Response.Task"
                },
                {
                    "type": "object",
                    "properties": {
                        "queryAlteration": {
                            "description": "A boolean to determine if query alteration have been applied to the search operation.",
                            "type": "boolean"
                        },
                        "synonyms": {
                            "description": "The synonyms used to apply the search query.",
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Synonym"
                            }
                        },
                        "rules": {
                            "description": "",
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "filter": {
                            "$ref": "#/definitions/ConditionBase",
                            "description": "The filters applied to the search result."
                        },
                        "boosts": {
                            "description": "The boost expressions applied to the search result.",
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BoostExpression"
                            }
                        }
                    }
                }
            ]
        },
        "Response.ItemsBase": {
            "description": "Defines the abstract base type for item results.",
            "required": [
                "_type"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/Response.Task"
                },
                {
                    "type": "object",
                    "properties": {
                        "totalEstimatedMatches": {
                            "format": "int64",
                            "description": "An estimated count of the items in the full result set.",
                            "type": "integer"
                        }
                    }
                }
            ],
            "properties": {
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type"
        },
        "Response.Items": {
            "description": "Defines a list of items from the result set.",
            "allOf": [
                {
                    "$ref": "#/definitions/Response.ItemsBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "value": {
                            "description": "The item results. May be limited by pagination.",
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Response.Item"
                            }
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "Items"
        },
        "Response.Item": {
            "description": "Defines an item from your content catalog.",
            "type": "object",
            "properties": {
                "indexId": {
                    "description": "The ID of the index the item belongs to.",
                    "type": "string"
                },
                "itemId": {
                    "description": "An ID that uniquely identifies an item within the index.",
                    "type": "string"
                },
                "score": {
                    "format": "double",
                    "description": "A value that indicates how well the item matches the query. Higher values indicate a closer match.",
                    "type": "number"
                },
                "fields": {
                    "type": "object",
                    "description": "An object with the selected fields as properties."
                },
                "debug": {
                    "description": "",
                    "uniqueItems": false,
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Response.DebugInfo"
                    }
                }
            }
        },
        "ComparisonOperator": {
            "enum": [
                "Eq",
                "Ne",
                "Gt",
                "Lt",
                "Ge",
                "Le"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "ComparisonOperator",
                "values": [
                    {
                        "value": "Eq"
                    },
                    {
                        "value": "Ne"
                    },
                    {
                        "value": "Gt"
                    },
                    {
                        "value": "Lt"
                    },
                    {
                        "value": "Ge"
                    },
                    {
                        "value": "Le"
                    }
                ]
            }
        },
        "CategoryOperator": {
            "enum": [
                "In",
                "NotIn"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "CategoryOperator",
                "values": [
                    {
                        "value": "In"
                    },
                    {
                        "value": "NotIn"
                    }
                ]
            }
        },
        "LogicalOperator": {
            "enum": [
                "And",
                "Or"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "LogicalOperator",
                "values": [
                    {
                        "value": "And"
                    },
                    {
                        "value": "Or"
                    }
                ]
            }
        },
        "SetOperator": {
            "enum": [
                "In",
                "NotIn"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "SetOperator",
                "values": [
                    {
                        "value": "In"
                    },
                    {
                        "value": "NotIn"
                    }
                ]
            }
        },
        "Response.Aggregation": {
            "description": "Defines an aggregation result.",
            "required": [
                "_type"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/Response.Task"
                },
                {
                    "type": "object",
                    "properties": {
                        "name": {
                            "description": "The aggregation name as defined in the requset.",
                            "type": "string"
                        },
                        "estimatedCount": {
                            "format": "int64",
                            "description": "An estimated count of items in this aggregation.",
                            "type": "integer"
                        },
                        "aggregations": {
                            "description": "The list of child aggregations, if any.",
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Response.Aggregation"
                            }
                        }
                    }
                }
            ],
            "properties": {
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type",
            "x-ms-discriminator-value": "Aggregation"
        },
        "Response.Filter": {
            "description": "Defines the number of results that match filter aggregation.",
            "allOf": [
                {
                    "$ref": "#/definitions/Response.Aggregation"
                },
                {
                    "type": "object"
                }
            ],
            "properties": {
                "_type": {
                    "type": "string"
                }
            },
            "x-ms-discriminator-value": "Filter"
        },
        "Response.DiscoveredFacets": {
            "description": "Defines the facets the API determines for you.",
            "allOf": [
                {
                    "$ref": "#/definitions/Response.Aggregation"
                },
                {
                    "type": "object",
                    "properties": {
                        "filter": {
                            "$ref": "#/definitions/ConditionBase",
                            "description": "The filter condition that facet discovery was limited to, satisfied by the top results."
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "DiscoveredFacets"
        },
        "Response.FieldAggregationBase": {
            "description": "Defines the abstract base type for aggregations based on fields.",
            "required": [
                "_type"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/Response.Aggregation"
                },
                {
                    "type": "object",
                    "properties": {
                        "field": {
                            "description": "The name of the field.",
                            "type": "string"
                        }
                    }
                }
            ],
            "properties": {
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type"
        },
        "Response.FacetBase": {
            "required": [
                "_type"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/Response.FieldAggregationBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "label": {
                            "description": "The facet label, that you can use to render your UI.",
                            "type": "string"
                        }
                    }
                }
            ],
            "properties": {
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type"
        },
        "Response.NumberFacet": {
            "description": "Defines a facet on a numeric field.",
            "allOf": [
                {
                    "$ref": "#/definitions/Response.FacetBase"
                },
                {
                    "type": "object"
                }
            ],
            "properties": {
                "refinements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Response.NumberRefinement"
                    }
                }
            },
            "x-ms-discriminator-value": "NumberFacet"
        },
        "Response.StringFacet": {
            "description": "Defines a facet with a string refinement.",
            "allOf": [
                {
                    "$ref": "#/definitions/Response.FacetBase"
                },
                {
                    "type": "object"
                }
            ],
            "properties": {
                "refinements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Response.StringRefinement"
                    }
                }
            },
            "x-ms-discriminator-value": "StringFacet"
        },
        "Response.CategoryFacet": {
            "description": "Defines a facet with a category refinement.",
            "allOf": [
                {
                    "$ref": "#/definitions/Response.FacetBase"
                },
                {
                    "type": "object"
                }
            ],
            "properties": {
                "refinements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Response.CategoryRefinement"
                    }
                }
            },
            "x-ms-discriminator-value": "CategoryFacet"
        },
        "Response.BoolFacet": {
            "description": "Defines a facet on a Boolean field.",
            "allOf": [
                {
                    "$ref": "#/definitions/Response.FacetBase"
                },
                {
                    "type": "object"
                }
            ],
            "properties": {
                "refinements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Response.BoolRefinement"
                    }
                }
            },
            "x-ms-discriminator-value": "BoolFacet"
        },
        "Response.RangeFacet": {
            "description": "Defines a facet with a range refinement.",
            "allOf": [
                {
                    "$ref": "#/definitions/Response.FacetBase"
                },
                {
                    "type": "object"
                }
            ],
            "properties": {
                "refinements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Response.RangeRefinement"
                    }
                }
            },
            "x-ms-discriminator-value": "RangeFacet"
        },
        "Response.Min": {
            "description": "Returns the minimum value of the field encountered within the match set.",
            "allOf": [
                {
                    "$ref": "#/definitions/Response.FieldAggregationBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "value": {
                            "format": "double",
                            "description": "The minimum value of the field for the match set.",
                            "type": "number"
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "Min"
        },
        "Response.Max": {
            "description": "Returns the maximum value of the field encountered within the match set.",
            "allOf": [
                {
                    "$ref": "#/definitions/Response.FieldAggregationBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "value": {
                            "format": "double",
                            "description": "The maximum value of the field for the match set.",
                            "type": "number"
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "Max"
        },
        "EquivalenceOperator": {
            "enum": [
                "Eq",
                "Ne"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "EquivalenceOperator",
                "values": [
                    {
                        "value": "Eq"
                    },
                    {
                        "value": "Ne"
                    }
                ]
            }
        },
        "Response.RefinementBase": {
            "description": "The abstract base type for a refinement on a facet",
            "required": [
                "_type"
            ],
            "type": "object",
            "properties": {
                "estimatedCount": {
                    "format": "int64",
                    "description": "An estimate of the number of items in this refinement.",
                    "type": "integer"
                },
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type"
        },
        "Response.RangeRefinement": {
            "description": "Defines a range facet refinement on a numeric field.",
            "allOf": [
                {
                    "$ref": "#/definitions/Response.RefinementBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "ge": {
                            "format": "double",
                            "description": "The inclusive lower bound of the range. Values in the refinement are greater than or equal to this lower bound.",
                            "type": "number"
                        },
                        "lt": {
                            "format": "double",
                            "description": "The exclusive upper bound of the range. Values in the refinement are strictly less than this upper bound",
                            "type": "number"
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "RangeRefinement"
        },
        "Response.NumberRefinement": {
            "description": "Defines a discrete number refinement on a numeric field.",
            "allOf": [
                {
                    "$ref": "#/definitions/Response.RefinementBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "value": {
                            "format": "double",
                            "description": "The actual filter value used to filter the list of items.",
                            "type": "number"
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "NumberRefinement"
        },
        "Response.StringRefinement": {
            "description": "Defines a facet refinement on a string field.",
            "required": [
                "_type"
            ],
            "allOf": [
                {
                    "$ref": "#/definitions/Response.RefinementBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "value": {
                            "description": "The actual filter value used to filter the list of items.",
                            "type": "string"
                        }
                    }
                }
            ],
            "properties": {
                "_type": {
                    "type": "string"
                }
            },
            "discriminator": "_type",
            "x-ms-discriminator-value": "StringRefinement"
        },
        "Response.CategoryRefinement": {
            "description": "Defines a facet refinement on a category field.",
            "allOf": [
                {
                    "$ref": "#/definitions/Response.StringRefinement"
                },
                {
                    "type": "object",
                    "properties": {
                        "refinements": {
                            "description": "A list of child category refinements.",
                            "uniqueItems": false,
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Response.CategoryRefinement"
                            }
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "CategoryRefinement"
        },
        "Response.BoolRefinement": {
            "description": "Defines a facet refinement on a boolean field.",
            "allOf": [
                {
                    "$ref": "#/definitions/Response.RefinementBase"
                },
                {
                    "type": "object",
                    "properties": {
                        "value": {
                            "description": "The actual filter value used to filter the list of items. The object includes this field only for filters with discrete values.",
                            "type": "boolean"
                        }
                    }
                }
            ],
            "x-ms-discriminator-value": "BoolRefinement"
        }
    },
    "securityDefinitions": {
        "AppId": {
            "type": "apiKey",
            "name": "appid",
            "in": "query"
        },
        "PortalBearerToken": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "security": [
        {
            "AppId": []
        },
        {
            "PortalBearerToken": []
        }
    ],
    "tags": [
        {
            "name": "CommerceSearchService",
            "description": "Bing Commerce Platform Search Service."
        }
    ]
}