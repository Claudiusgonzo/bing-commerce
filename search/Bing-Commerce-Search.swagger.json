{
  "openapi": "3.0.1",
  "info": {
    "title": "Bing Commerce Search",
    "version": "1"
  },
  "servers": [
    {
      "url": "https://commerce.bing.com/api/search/v1/"
    }
  ],
  "paths": {
    "/{tenant}/indexes/{index}": {
      "post": {
        "tags": [
          "CommerceSearchService"
        ],
        "summary": "Bing Commerce Custom Search Query.",
        "description": "POST requests accept complex search request options.",
        "operationId": "Search_Post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommerceSearchPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceSearchResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "CommerceSearchService"
        ],
        "summary": "Bing Commerce Basic Search Query.",
        "description": "GET requests can search an index using only URL parameters. Only limited request options are available. GET requests will always do simple item search and support only a default facet discovery aggregation.",
        "operationId": "Search_Get",
        "parameters": [
          {
            "name": "mkt",
            "in": "query",
            "description": "The market where the results come from. Typically, `mkt` is the country where the user is making the request from.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "setlang",
            "in": "query",
            "description": "The language to use for user interface strings. You may specify the language using either a 2-letter or 4-letter code. Using 4-letter codes is preferred.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The query to match against all eligible fields.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "select",
            "in": "query",
            "description": "A comma-separated list of fields to return. unspecified or empty to select only _itemId, or `*` to select all fields.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "A comma-separated list of OData order syntax expressions.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "The maximum count of items to return for pagination. Default is 24.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The offset to the first item to return for pagination. Default is 0.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "discoverfacets",
            "in": "query",
            "description": "Default value is false. When true, requests a facet discovery aggregation.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "alteration",
            "in": "query",
            "description": "A boolean flag to enable or disable query alteration. Default is true.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "debug",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "searchinstanceid",
            "in": "query",
            "description": "A saved search instance configuration to apply to current request.",
            "schema": {
              "type": "string",
              "default": "Default"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommerceSearchResponse"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "tenant",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "index",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "CommerceSearchPostRequest": {
        "type": "object",
        "properties": {
          "market": {
            "type": "string",
            "description": "The market where the results come from. Typically, `mkt` is the country where the user is making the request from."
          },
          "client": {
            "$ref": "#/components/schemas/Request.Client"
          },
          "language": {
            "type": "string",
            "description": "The language to use for user interface strings. You may specify the language using either a 2-letter or 4-letter code. Using 4-letter codes is preferred."
          },
          "query": {
            "$ref": "#/components/schemas/Request.Query"
          },
          "items": {
            "$ref": "#/components/schemas/Request.Items"
          },
          "aggregations": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Request.AggregationBase"
            }
          },
          "debug": {
            "type": "boolean",
            "default": false
          },
          "searchInstanceId": {
            "type": "string",
            "description": "A saved search instance configuration to apply to current request.",
            "default": "Default"
          }
        }
      },
      "Request.Client": {
        "type": "object",
        "properties": {
          "ids": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Request.ClientId"
            }
          }
        }
      },
      "Request.ClientId": {
        "type": "object",
        "properties": {
          "kind": {
            "enum": [
              "MUID",
              "UID"
            ],
            "type": "string",
            "default": "MUID"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Request.Query": {
        "type": "object",
        "properties": {
          "matchAll": {
            "type": "string",
            "description": "A query that matches against all searchable fields."
          },
          "value": {
            "$ref": "#/components/schemas/Request.QueryClauseBase"
          },
          "filter": {
            "$ref": "#/components/schemas/ConditionBase"
          },
          "boosts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BoostExpression"
            },
            "description": "The set of boosts to apply to the result set."
          },
          "alteration": {
            "type": "boolean",
            "description": "A boolean flag to enable or disable query alteration.",
            "default": true
          },
          "synonyms": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Synonym"
            },
            "description": "A set of alternate terms (or phrases) that can be applied to request query. The applied synonyms are used for both text-matching and result-ranking stages of search."
          }
        },
        "description": "Represents the query that determines the result set. Note that query must have a matchAll, value, or filter field. The matchAll and value fields cannot both be present. You may create a query with only a filter to **browse** (for example: a category)."
      },
      "Request.QueryClauseBase": {
        "required": [
          "_type"
        ],
        "type": "object",
        "properties": {
          "_type": {
            "type": "string"
          }
        },
        "description": "Defines the abstract base type for a query clause.",
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "Match": "Request.Match",
            "MatchStreams": "Request.Bing.MatchStreams",
            "QueryClauseBlock": "Request.QueryClauseBlock",
            "LocationMatch": "Request.LocationMatch"
          }
        }
      },
      "Request.Match": {
        "required": [
          "_type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Request.QueryClauseBase"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "The search terms to match on the specified fields."
              }
            }
          }
        ],
        "properties": {
          "_type": {
            "type": "string"
          }
        },
        "description": "Defines a type of query to search specific fields.",
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "Match": "Request.Match",
            "MatchStreams": "Request.Bing.MatchStreams"
          }
        },
        "x-ms-discriminator-value": "Match"
      },
      "Request.Bing.MatchStreams": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Request.Match"
          },
          {
            "type": "object",
            "properties": {
              "include": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "x-ms-discriminator-value": "MatchStreams"
      },
      "Request.QueryClauseBlock": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Request.QueryClauseBase"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Request.QueryClauseBase"
                },
                "description": "A list of queryclausebase conditions to be applied."
              }
            }
          }
        ],
        "description": "Defines a list of QueryClauseBase objects that should all match. Nested QueryClauseBlock within QueryClauseBlock is not allowed.",
        "x-ms-discriminator-value": "QueryClauseBlock"
      },
      "Request.LocationMatch": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Request.QueryClauseBase"
          },
          {
            "type": "object",
            "properties": {
              "center": {
                "$ref": "#/components/schemas/GeoPoint"
              },
              "radius": {
                "type": "number",
                "description": "The accuracy of the search on that location in meters.",
                "format": "float"
              }
            }
          }
        ],
        "description": "Defines user location to match. If an explicit location is specified in a match query, this is ignored.",
        "x-ms-discriminator-value": "LocationMatch"
      },
      "GeoPoint": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number",
            "description": "The lattitude of the location.",
            "format": "float"
          },
          "lon": {
            "type": "number",
            "description": "The longitude of the location.",
            "format": "float"
          }
        },
        "description": "Defines a geo-location based on lattitude and longitude."
      },
      "ConditionBase": {
        "required": [
          "_type"
        ],
        "type": "object",
        "properties": {
          "_type": {
            "type": "string"
          }
        },
        "description": "The condition that items must satisfy to be boosted.",
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "ConditionBlock": "ConditionBlock",
            "StringCondition": "StringCondition",
            "BoolCondition": "BoolCondition",
            "NumericCondition": "NumericCondition",
            "CategoryCondition": "CategoryCondition",
            "StringSetCondition": "StringSetCondition",
            "GeoCondition": "GeoCondition"
          }
        }
      },
      "ConditionBlock": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionBase"
          },
          {
            "type": "object",
            "properties": {
              "conditions": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ConditionBase"
                },
                "description": "The set of operands."
              },
              "operator": {
                "$ref": "#/components/schemas/LogicalOperator"
              }
            }
          }
        ],
        "description": "Defines a list of composite conditions for filtering and boosting.",
        "x-ms-discriminator-value": "ConditionBlock"
      },
      "FieldConditionBase": {
        "required": [
          "_type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionBase"
          },
          {
            "type": "object",
            "properties": {
              "field": {
                "type": "string",
                "description": "The name of the field."
              }
            }
          }
        ],
        "properties": {
          "_type": {
            "type": "string"
          }
        },
        "description": "Defines the abstract base type for conditions with a field name.",
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "StringCondition": "StringCondition",
            "BoolCondition": "BoolCondition",
            "NumericCondition": "NumericCondition",
            "CategoryCondition": "CategoryCondition",
            "StringSetCondition": "StringSetCondition"
          }
        }
      },
      "EquivalenceConditionBase": {
        "required": [
          "_type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldConditionBase"
          },
          {
            "type": "object",
            "properties": {
              "operator": {
                "$ref": "#/components/schemas/EquivalenceOperator"
              }
            }
          }
        ],
        "properties": {
          "_type": {
            "type": "string"
          }
        },
        "description": "Defines the abstract base type for conditions that does an exact match for a field.",
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "StringCondition": "StringCondition",
            "BoolCondition": "BoolCondition"
          }
        }
      },
      "StringCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EquivalenceConditionBase"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "The value to compare the field against."
              }
            }
          }
        ],
        "description": "Defines an equivalence condition for a string field. It can appear in a filter, a boost, or a filter aggregation.",
        "x-ms-discriminator-value": "StringCondition"
      },
      "BoolCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EquivalenceConditionBase"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "boolean",
                "description": "The value (true or false) to compare the field against."
              }
            }
          }
        ],
        "description": "Defines an equivalence condition for a Boolean field. It can appear in a filter, a boost, or a filter aggregation.",
        "x-ms-discriminator-value": "BoolCondition"
      },
      "NumericCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldConditionBase"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "The value to compare the field against.",
                "format": "double"
              },
              "operator": {
                "$ref": "#/components/schemas/ComparisonOperator"
              }
            }
          }
        ],
        "description": "Defines an equivalence condition for a numeric field. It can appear in a filter, a boost, or a filter aggregation.",
        "x-ms-discriminator-value": "NumericCondition"
      },
      "CategoryCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldConditionBase"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "The category to match items against. The format for specifying hierarchical categories is a pipe-delimited string, such as `Meanswear|shirts|Dress Shirts`."
              },
              "operator": {
                "$ref": "#/components/schemas/CategoryOperator"
              }
            }
          }
        ],
        "description": "Defines an inclusion condition for a category field. It can appear in a filter, a boost, or a filter aggregation.",
        "x-ms-discriminator-value": "CategoryCondition"
      },
      "SetConditionBase": {
        "required": [
          "_type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldConditionBase"
          },
          {
            "type": "object",
            "properties": {
              "operator": {
                "$ref": "#/components/schemas/SetOperator"
              }
            }
          }
        ],
        "properties": {
          "_type": {
            "type": "string"
          }
        },
        "description": "Defines the abstract base type for conditions that matches with a set of values.",
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "StringSetCondition": "StringSetCondition"
          }
        }
      },
      "StringSetCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SetConditionBase"
          },
          {
            "type": "object",
            "properties": {
              "values": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The set of values for the field to match against."
              }
            }
          }
        ],
        "description": "Defines a condition where the field must exactly match one of the values within the set to be included / excluded. It can appear in a filter, a boost, or a filter aggregation.",
        "x-ms-discriminator-value": "StringSetCondition"
      },
      "GeoCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionBase"
          },
          {
            "type": "object",
            "properties": {
              "boundary": {
                "$ref": "#/components/schemas/GeoBoundaryBase"
              }
            }
          }
        ],
        "description": "Defines a condition that applies on a geo-location field. It can appear in a filter, a boost, or a filter aggregation.",
        "x-ms-discriminator-value": "GeoCondition"
      },
      "GeoBoundaryBase": {
        "required": [
          "_type"
        ],
        "type": "object",
        "properties": {
          "_type": {
            "type": "string"
          }
        },
        "description": "Defines the abstract base type for geo-location boundary.",
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "GeoBoundingBox": "GeoBoundingBox",
            "GeoDistance": "GeoDistance"
          }
        }
      },
      "GeoBoundingBox": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GeoBoundaryBase"
          },
          {
            "type": "object",
            "properties": {
              "topLeft": {
                "$ref": "#/components/schemas/GeoPoint"
              },
              "bottomRight": {
                "$ref": "#/components/schemas/GeoPoint"
              }
            }
          }
        ],
        "description": "Defines a geographical box to match the results that lie within it.",
        "x-ms-discriminator-value": "GeoBoundingBox"
      },
      "GeoDistance": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GeoBoundaryBase"
          },
          {
            "type": "object",
            "properties": {
              "center": {
                "$ref": "#/components/schemas/GeoPoint"
              },
              "radius": {
                "type": "number",
                "description": "The accpeptable euclidean distance to the center.",
                "format": "float"
              }
            }
          }
        ],
        "description": "Defines a geographical boundary that matches location within a certain euclidean distance from a point.",
        "x-ms-discriminator-value": "GeoDistance"
      },
      "BoostExpression": {
        "type": "object",
        "properties": {
          "condition": {
            "$ref": "#/components/schemas/ConditionBase"
          },
          "boost": {
            "type": "number",
            "description": "The value to add to the ranking score. The range is -10,000,000 to 10,000,000.",
            "format": "double"
          }
        },
        "description": "An expression that modifies the ranking score for item search results satisfying a condition."
      },
      "Synonym": {
        "type": "object",
        "properties": {
          "synonymId": {
            "type": "string",
            "description": "The id for the saved synonym."
          },
          "synonyms": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The alternate terms to apply"
          }
        },
        "description": "Defines a set of alternate terms (or phrases) that can be applied to request query."
      },
      "Request.Items": {
        "type": "object",
        "properties": {
          "select": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of fields that should appear for each item of the response."
          },
          "orderBy": {
            "type": "string",
            "description": "A comma-separated list of OData order syntax expressions."
          },
          "top": {
            "type": "integer",
            "description": "The number of results to return. It can be used for pagination.",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "description": "The number of results to skip in the result set. Supports pagination.",
            "format": "int32"
          },
          "dedupe": {
            "type": "boolean",
            "description": "A boolean to specify whether you want the result set to exclude duplicates. Default is `false`.",
            "default": false
          }
        },
        "description": "Defines how to return items from the result set."
      },
      "Request.AggregationBase": {
        "required": [
          "_type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A label that you specify for your aggregations, which the API passes through and returns with the response."
          },
          "aggregations": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Request.AggregationBase"
            },
            "description": "A list of child aggregations."
          },
          "_type": {
            "type": "string"
          }
        },
        "description": "Defines the abstract base type for an aggregation request.",
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "Filter": "Request.Filter",
            "Facet": "Request.Facet",
            "RangeFacet": "Request.RangeFacet",
            "Min": "Request.Min",
            "Max": "Request.Max",
            "DiscoverFacets": "Request.DiscoverFacets"
          }
        }
      },
      "Request.Filter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Request.AggregationBase"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "$ref": "#/components/schemas/ConditionBase"
              },
              "includeCustomizations": {
                "type": "boolean",
                "default": true
              }
            }
          }
        ],
        "description": "Defines a filter aggregation.",
        "x-ms-discriminator-value": "Filter"
      },
      "Request.FieldAggregationBase": {
        "required": [
          "_type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Request.AggregationBase"
          },
          {
            "type": "object",
            "properties": {
              "field": {
                "type": "string",
                "description": "The field name."
              }
            }
          }
        ],
        "properties": {
          "_type": {
            "type": "string"
          }
        },
        "description": "Defines the abstract base type for an aggregation request that have a field.",
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "Facet": "Request.Facet",
            "RangeFacet": "Request.RangeFacet",
            "Min": "Request.Min",
            "Max": "Request.Max"
          }
        }
      },
      "Request.FacetBase": {
        "required": [
          "_type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Request.FieldAggregationBase"
          },
          {
            "type": "object",
            "properties": {
              "orderBy": {
                "type": "string",
                "description": "A comma-separated list of OData order syntax expressions. Default is `_count desc`"
              }
            }
          }
        ],
        "properties": {
          "_type": {
            "type": "string"
          }
        },
        "description": "Defines the abstract base type for a facet request.",
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "Facet": "Request.Facet",
            "RangeFacet": "Request.RangeFacet"
          }
        }
      },
      "Request.Facet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Request.FacetBase"
          },
          {
            "type": "object"
          }
        ],
        "description": "Defines a facet where each refinement is for a single value.",
        "x-ms-discriminator-value": "Facet"
      },
      "Request.RangeFacet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Request.FacetBase"
          },
          {
            "type": "object",
            "properties": {
              "interval": {
                "type": "integer",
                "description": "Defines the size of the interval that can be used to refine a search which utilizes numerical range faceting.",
                "format": "int32"
              }
            }
          }
        ],
        "description": "Defines a facet with refinements that have numerical ranges.",
        "x-ms-discriminator-value": "RangeFacet"
      },
      "Request.Min": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Request.FieldAggregationBase"
          },
          {
            "type": "object"
          }
        ],
        "description": "Aggregation type for getting the min value of a field. Only applicable to numeric data.",
        "x-ms-discriminator-value": "Min"
      },
      "Request.Max": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Request.FieldAggregationBase"
          },
          {
            "type": "object"
          }
        ],
        "description": "Aggregation type for getting the max value of a field. Only applicable to numeric data.",
        "x-ms-discriminator-value": "Max"
      },
      "Request.DiscoverFacets": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Request.AggregationBase"
          },
          {
            "type": "object",
            "properties": {
              "discoverFilter": {
                "type": "boolean",
                "description": "When true, if the top results share a filter then restrict facet discovery to that filter. Note that it attempts to discover category based filters.",
                "default": false
              },
              "refinements": {
                "type": "boolean",
                "description": "When true, returns refinement values in the response.",
                "default": true
              },
              "pin": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Request.FacetBase"
                },
                "description": "A list of facets to pin at the top positions of the DiscoveredFacets aggregations list."
              },
              "include": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Request.FacetBase"
                },
                "description": "A list of facets to be included, but not necessarily at the top positions."
              },
              "exclude": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "A list of field names to exclude from consideration."
              },
              "facetDefaults": {
                "$ref": "#/components/schemas/Request.Facet"
              },
              "rangeFacetDefaults": {
                "$ref": "#/components/schemas/Request.RangeFacet"
              }
            }
          }
        ],
        "description": "Defines an aggregation type that triggers facet discovery of significant facets.",
        "x-ms-discriminator-value": "DiscoverFacets"
      },
      "CommerceSearchResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.Task"
          },
          {
            "type": "object",
            "properties": {
              "impressionId": {
                "type": "string",
                "description": "A random GUID to uniquely track the search response."
              },
              "queryContext": {
                "$ref": "#/components/schemas/Response.QueryContext"
              },
              "items": {
                "$ref": "#/components/schemas/Response.ItemsBase"
              },
              "aggregations": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Response.Aggregation"
                },
                "description": "The aggregations result."
              },
              "redirectUrl": {
                "type": "string",
                "description": "The redirect url for this the current query from the request search instance."
              },
              "customization": {
                "$ref": "#/components/schemas/Response.Customization"
              }
            }
          }
        ],
        "description": "The response to a Bing Commerce Search Query.",
        "x-ms-discriminator-value": "SearchResponse"
      },
      "Response.QueryContext": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.Task"
          },
          {
            "type": "object",
            "properties": {
              "originalQuery": {
                "type": "string",
                "description": "The user's query string as entered."
              },
              "alteredQuery": {
                "type": "string",
                "description": "The altered query string that the API actually uses for the query (for example, corrected spelling)."
              }
            }
          }
        ],
        "description": "Defines an object that contains the result of query alteration."
      },
      "Response.Task": {
        "required": [
          "_type"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Response.Error"
            },
            "description": "A list of errors that happened to the task, if any."
          },
          "debug": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Response.DebugInfo"
            },
            "description": ""
          },
          "_type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "Items": "Response.Items",
            "Aggregation": "Response.Aggregation",
            "Filter": "Response.Filter",
            "DiscoveredFacets": "Response.DiscoveredFacets",
            "NumberFacet": "Response.NumberFacet",
            "StringFacet": "Response.StringFacet",
            "CategoryFacet": "Response.CategoryFacet",
            "BoolFacet": "Response.BoolFacet",
            "RangeFacet": "Response.RangeFacet",
            "Min": "Response.Min",
            "Max": "Response.Max",
            "SearchResponse": "CommerceSearchResponse"
          }
        }
      },
      "Response.Error": {
        "type": "object",
        "properties": {
          "code": {
            "enum": [
              "None",
              "ServerError",
              "InvalidRequest",
              "InsufficientAuthorization"
            ],
            "type": "string",
            "default": "None"
          },
          "subCode": {
            "enum": [
              "UnexpectedError",
              "ResourceError",
              "DeadlineExceeded",
              "ParameterMissing",
              "ParameterInvalidValue"
            ],
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "moreDetails": {
            "type": "string"
          }
        },
        "description": "Defines The error details that happened to a task."
      },
      "Response.DebugInfo": {
        "required": [
          "_type"
        ],
        "type": "object",
        "properties": {
          "_type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "BingItemDebugInfo": "Response.Bing.BingItemDebugInfo"
          }
        }
      },
      "Response.Bing.BingItemDebugInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.DebugInfo"
          },
          {
            "type": "object",
            "properties": {
              "perfectMatchingStreams": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Response.Bing.MatchingStream"
                }
              },
              "completeMatchingStreams": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Response.Bing.MatchingStream"
                }
              }
            }
          }
        ],
        "x-ms-discriminator-value": "BingItemDebugInfo"
      },
      "Response.Bing.MatchingStream": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "score": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Response.Customization": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.Task"
          },
          {
            "type": "object",
            "properties": {
              "queryAlteration": {
                "type": "boolean",
                "description": "A boolean to determine if query alteration have been applied to the search operation."
              },
              "synonyms": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Synonym"
                },
                "description": "The synonyms used to apply the search query."
              },
              "rules": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": ""
              },
              "filter": {
                "$ref": "#/components/schemas/ConditionBase"
              },
              "boosts": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BoostExpression"
                },
                "description": "The boost expressions applied to the search result."
              }
            }
          }
        ],
        "description": "Defines the customizations applied to the search operation."
      },
      "Response.ItemsBase": {
        "required": [
          "_type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.Task"
          },
          {
            "type": "object",
            "properties": {
              "totalEstimatedMatches": {
                "type": "integer",
                "description": "An estimated count of the items in the full result set.",
                "format": "int64"
              }
            }
          }
        ],
        "properties": {
          "_type": {
            "type": "string"
          }
        },
        "description": "Defines the abstract base type for item results.",
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "Items": "Response.Items"
          }
        }
      },
      "Response.Items": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.ItemsBase"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Response.Item"
                },
                "description": "The item results. May be limited by pagination."
              }
            }
          }
        ],
        "description": "Defines a list of items from the result set.",
        "x-ms-discriminator-value": "Items"
      },
      "Response.Item": {
        "type": "object",
        "properties": {
          "indexId": {
            "type": "string",
            "description": "The ID of the index the item belongs to."
          },
          "itemId": {
            "type": "string",
            "description": "An ID that uniquely identifies an item within the index."
          },
          "score": {
            "type": "number",
            "description": "A value that indicates how well the item matches the query. Higher values indicate a closer match.",
            "format": "double"
          },
          "fields": {
            "type": "object"
          },
          "debug": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Response.DebugInfo"
            },
            "description": ""
          }
        },
        "description": "Defines an item from your content catalog."
      },
      "ComparisonOperator": {
        "enum": [
          "Eq",
          "Ne",
          "Gt",
          "Lt",
          "Ge",
          "Le"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ComparisonOperator",
          "values": [
            {
              "value": "Eq"
            },
            {
              "value": "Ne"
            },
            {
              "value": "Gt"
            },
            {
              "value": "Lt"
            },
            {
              "value": "Ge"
            },
            {
              "value": "Le"
            }
          ]
        }
      },
      "CategoryOperator": {
        "enum": [
          "In",
          "NotIn"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "CategoryOperator",
          "values": [
            {
              "value": "In"
            },
            {
              "value": "NotIn"
            }
          ]
        }
      },
      "LogicalOperator": {
        "enum": [
          "And",
          "Or"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "LogicalOperator",
          "values": [
            {
              "value": "And"
            },
            {
              "value": "Or"
            }
          ]
        }
      },
      "SetOperator": {
        "enum": [
          "In",
          "NotIn"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "SetOperator",
          "values": [
            {
              "value": "In"
            },
            {
              "value": "NotIn"
            }
          ]
        }
      },
      "Response.Aggregation": {
        "required": [
          "_type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.Task"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The aggregation name as defined in the requset."
              },
              "estimatedCount": {
                "type": "integer",
                "description": "An estimated count of items in this aggregation.",
                "format": "int64"
              },
              "aggregations": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Response.Aggregation"
                },
                "description": "The list of child aggregations, if any."
              }
            }
          }
        ],
        "properties": {
          "_type": {
            "type": "string"
          }
        },
        "description": "Defines an aggregation result.",
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "Aggregation": "Response.Aggregation",
            "Filter": "Response.Filter",
            "DiscoveredFacets": "Response.DiscoveredFacets",
            "NumberFacet": "Response.NumberFacet",
            "StringFacet": "Response.StringFacet",
            "CategoryFacet": "Response.CategoryFacet",
            "BoolFacet": "Response.BoolFacet",
            "RangeFacet": "Response.RangeFacet",
            "Min": "Response.Min",
            "Max": "Response.Max"
          }
        },
        "x-ms-discriminator-value": "Aggregation"
      },
      "Response.Filter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.Aggregation"
          },
          {
            "type": "object"
          }
        ],
        "properties": {
          "_type": {
            "type": "string"
          }
        },
        "description": "Defines the number of results that match filter aggregation.",
        "x-ms-discriminator-value": "Filter"
      },
      "Response.DiscoveredFacets": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.Aggregation"
          },
          {
            "type": "object",
            "properties": {
              "filter": {
                "$ref": "#/components/schemas/ConditionBase"
              }
            }
          }
        ],
        "description": "Defines the facets the API determines for you.",
        "x-ms-discriminator-value": "DiscoveredFacets"
      },
      "Response.FieldAggregationBase": {
        "required": [
          "_type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.Aggregation"
          },
          {
            "type": "object",
            "properties": {
              "field": {
                "type": "string",
                "description": "The name of the field."
              }
            }
          }
        ],
        "properties": {
          "_type": {
            "type": "string"
          }
        },
        "description": "Defines the abstract base type for aggregations based on fields.",
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "NumberFacet": "Response.NumberFacet",
            "StringFacet": "Response.StringFacet",
            "CategoryFacet": "Response.CategoryFacet",
            "BoolFacet": "Response.BoolFacet",
            "RangeFacet": "Response.RangeFacet",
            "Min": "Response.Min",
            "Max": "Response.Max"
          }
        }
      },
      "Response.FacetBase": {
        "required": [
          "_type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.FieldAggregationBase"
          },
          {
            "type": "object",
            "properties": {
              "label": {
                "type": "string",
                "description": "The facet label, that you can use to render your UI."
              }
            }
          }
        ],
        "properties": {
          "_type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "NumberFacet": "Response.NumberFacet",
            "StringFacet": "Response.StringFacet",
            "CategoryFacet": "Response.CategoryFacet",
            "BoolFacet": "Response.BoolFacet",
            "RangeFacet": "Response.RangeFacet"
          }
        }
      },
      "Response.NumberFacet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.FacetBase"
          },
          {
            "type": "object"
          }
        ],
        "properties": {
          "refinements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Response.NumberRefinement"
            }
          }
        },
        "description": "Defines a facet on a numeric field.",
        "x-ms-discriminator-value": "NumberFacet"
      },
      "Response.StringFacet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.FacetBase"
          },
          {
            "type": "object"
          }
        ],
        "properties": {
          "refinements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Response.StringRefinement"
            }
          }
        },
        "description": "Defines a facet with a string refinement.",
        "x-ms-discriminator-value": "StringFacet"
      },
      "Response.CategoryFacet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.FacetBase"
          },
          {
            "type": "object"
          }
        ],
        "properties": {
          "refinements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Response.CategoryRefinement"
            }
          }
        },
        "description": "Defines a facet with a category refinement.",
        "x-ms-discriminator-value": "CategoryFacet"
      },
      "Response.BoolFacet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.FacetBase"
          },
          {
            "type": "object"
          }
        ],
        "properties": {
          "refinements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Response.BoolRefinement"
            }
          }
        },
        "description": "Defines a facet on a Boolean field.",
        "x-ms-discriminator-value": "BoolFacet"
      },
      "Response.RangeFacet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.FacetBase"
          },
          {
            "type": "object"
          }
        ],
        "properties": {
          "refinements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Response.RangeRefinement"
            }
          }
        },
        "description": "Defines a facet with a range refinement.",
        "x-ms-discriminator-value": "RangeFacet"
      },
      "Response.Min": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.FieldAggregationBase"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "The minimum value of the field for the match set.",
                "format": "double"
              }
            }
          }
        ],
        "description": "Returns the minimum value of the field encountered within the match set.",
        "x-ms-discriminator-value": "Min"
      },
      "Response.Max": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.FieldAggregationBase"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "The maximum value of the field for the match set.",
                "format": "double"
              }
            }
          }
        ],
        "description": "Returns the maximum value of the field encountered within the match set.",
        "x-ms-discriminator-value": "Max"
      },
      "EquivalenceOperator": {
        "enum": [
          "Eq",
          "Ne"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "EquivalenceOperator",
          "values": [
            {
              "value": "Eq"
            },
            {
              "value": "Ne"
            }
          ]
        }
      },
      "Response.RefinementBase": {
        "required": [
          "_type"
        ],
        "type": "object",
        "properties": {
          "estimatedCount": {
            "type": "integer",
            "description": "An estimate of the number of items in this refinement.",
            "format": "int64"
          },
          "_type": {
            "type": "string"
          }
        },
        "description": "The abstract base type for a refinement on a facet",
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "RangeRefinement": "Response.RangeRefinement",
            "NumberRefinement": "Response.NumberRefinement",
            "StringRefinement": "Response.StringRefinement",
            "CategoryRefinement": "Response.CategoryRefinement",
            "BoolRefinement": "Response.BoolRefinement"
          }
        }
      },
      "Response.RangeRefinement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.RefinementBase"
          },
          {
            "type": "object",
            "properties": {
              "ge": {
                "type": "number",
                "description": "The inclusive lower bound of the range. Values in the refinement are greater than or equal to this lower bound.",
                "format": "double"
              },
              "lt": {
                "type": "number",
                "description": "The exclusive upper bound of the range. Values in the refinement are strictly less than this upper bound",
                "format": "double"
              }
            }
          }
        ],
        "description": "Defines a range facet refinement on a numeric field.",
        "x-ms-discriminator-value": "RangeRefinement"
      },
      "Response.NumberRefinement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.RefinementBase"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "The actual filter value used to filter the list of items.",
                "format": "double"
              }
            }
          }
        ],
        "description": "Defines a discrete number refinement on a numeric field.",
        "x-ms-discriminator-value": "NumberRefinement"
      },
      "Response.StringRefinement": {
        "required": [
          "_type"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.RefinementBase"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "The actual filter value used to filter the list of items."
              }
            }
          }
        ],
        "properties": {
          "_type": {
            "type": "string"
          }
        },
        "description": "Defines a facet refinement on a string field.",
        "discriminator": {
          "propertyName": "_type",
          "mapping": {
            "StringRefinement": "Response.StringRefinement",
            "CategoryRefinement": "Response.CategoryRefinement"
          }
        },
        "x-ms-discriminator-value": "StringRefinement"
      },
      "Response.CategoryRefinement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.StringRefinement"
          },
          {
            "type": "object",
            "properties": {
              "refinements": {
                "uniqueItems": false,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Response.CategoryRefinement"
                },
                "description": "A list of child category refinements."
              }
            }
          }
        ],
        "description": "Defines a facet refinement on a category field.",
        "x-ms-discriminator-value": "CategoryRefinement"
      },
      "Response.BoolRefinement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response.RefinementBase"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "boolean",
                "description": "The actual filter value used to filter the list of items. The object includes this field only for filters with discrete values."
              }
            }
          }
        ],
        "description": "Defines a facet refinement on a boolean field.",
        "x-ms-discriminator-value": "BoolRefinement"
      }
    },
    "securitySchemes": {
      "AppId": {
        "type": "apiKey",
        "name": "appid",
        "in": "query"
      },
      "PortalBearerToken": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "AppId": [ ]
    },
    {
      "PortalBearerToken": [ ]
    }
  ],
  "tags": [
    {
      "name": "CommerceSearchService",
      "description": "Bing Commerce Platform Search Service."
    }
  ]
}